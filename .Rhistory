LULC_transitions <- read_csv("input/LULC-transitions-c.csv")
#Carregando dados da legenda das classes
library(readr)
legend_table <- read_csv("output/legend_table.csv")
###Juntando as bases
library(dplyr)
#Selecionando apenas as colunas desejadas para o bind
transitions_from = legend_table %>%
select(Class, categoryValue)
#Renomenado a coluna que fara a chave
transitions_from= transitions_from %>%
rename(From = Class)
#Dando o join e limpando os NAs
LULC_tr_from = dplyr::full_join(transitions_from, LULC_transitions, by = "From", na.rm = TRUE)
LULC_tr_from = LULC_tr_from%>% filter(!is.na(km2))  #retirando os NAs
#Limpando as colunas adicionais e renomeando algumas outras
LULC_tr_from = LULC_tr_from %>%
select(-From)
LULC_tr_from = LULC_tr_from %>%
rename(From = categoryValue)
#Selecionando apenas as colunas desejadas para o bind
transitions_to = legend_table %>%
select(Class, categoryValue)
#Renomenado a coluna que fara a chave
transitions_to= transitions_to %>%
rename(To = Class)
#Dando o join e limpando os NAs
LULC_tr_to = dplyr::full_join(transitions_to, LULC_tr_from, by = "To", na.rm = TRUE)
LULC_tr_to = LULC_tr_to%>% filter(!is.na(km2))  #retirando os NAs
#Limpando as colunas adicionais e renomeando algumas outras
LULC_tr_to = LULC_tr_to %>%
select(-To)
LULC_tr_to = LULC_tr_to %>%
rename(To = categoryValue)
###Testando o grafico de chord
library(OpenLand)
#Arrumando a legenda
legenda = legend_table %>%
select(categoryValue:Color)
legenda = legenda %>% rename(color = Color)
legenda$categoryName <- factor(c("Fo", "FF","SF", "Mg",
"FP","Nf","WL","GL",
"OF","Pa","Ag","TC",
"SC","Mo","Nv","BD",
"UA","ON","Wa","No",
"RO","Mn","Aq","Sa",
"RL","PC","SB","Rc",
"OT","MC","Cf","Ct",
"OP","WR"),
levels = c("Ag", "Ct", "Cf", "FP", "Mo", "MC",
"OP", "OT", "PC", "Rc", "SB", "SC",
"TC", "Fo", "FF", "Mg", "SF", "WR",
"GL", "Nf", "OF", "RO", "Sa", "WL",
"No", "BD", "Mn", "Nv", "ON", "UA",
"Pa", "Aq", "RL", "Wa"))
chordDiagramLand(dataset = LULC_tr_to,
legendtable = legenda)
sankeyLand(dataset =  LULC_tr_to,
legendtable = legenda)
chordDiagramLand(dataset = LULC_tr_to,
legendtable = legenda)
#Selecionando apenas as colunas desejadas para o bind
agregado_from = legend_table %>%
select(Aggregated_class, categoryValue)
#Renomenado a coluna que fara a chave
agregado_from = agregado_from %>%
rename(From = categoryValue)
#Dando o join e limpando os NAs
LULC_agg_from = dplyr::full_join(agregado_from, LULC_tr_to, by = "From", na.rm = TRUE)
LULC_agg_from = LULC_agg_from%>% filter(!is.na(km2))  #retirando os NAs
#Retirando a coluna com codigos antigos
LULC_agg_from = LULC_agg_from %>% select(-From)
#Pegando o codigo de classe das categorias agregadas
chave_agg_from = legend_table %>% select(Aggregated_class, agg_categoryValue)
chave_agg_from = distinct(chave_agg_from)
LULC_agg_from = dplyr::left_join(LULC_agg_from, chave_agg_from, by = "Aggregated_class", na.rm = TRUE)
LULC_agg_from = LULC_agg_from %>% select(-Aggregated_class)
LULC_agg_from = LULC_agg_from %>% rename(From = agg_categoryValue)
#Selecionando apenas as colunas desejadas para o bind
agregado_to = legend_table %>%
select(Aggregated_class, categoryValue)
#Renomenado a coluna que fara a chave
agregado_to = agregado_to %>%
rename(To = categoryValue)
#Dando o join e limpando os NAs
LULC_agg_to = dplyr::full_join(agregado_to, LULC_agg_from, by = "To", na.rm = TRUE)
LULC_agg_to = LULC_agg_to%>% filter(!is.na(km2))  #retirando os NAs
#Retirando a coluna com codigos antigos
LULC_agg_to = LULC_agg_to %>% select(-To)
#Pegando o codigo de classe das categorias agregadas
chave_agg_from = legend_table %>% select(Aggregated_class, agg_categoryValue)
chave_agg_from = distinct(chave_agg_from)
LULC_agg_to = dplyr::left_join(LULC_agg_to, chave_agg_from, by = "Aggregated_class", na.rm = TRUE)
LULC_agg_to = LULC_agg_to %>% select(-Aggregated_class)
LULC_agg_to = LULC_agg_to %>% rename(To = agg_categoryValue)
#Agora e necessario dar um groupby para reduzir o numero de linhas
transitions_agregado = LULC_agg_to %>%
group_by(From, To) %>%
summarise(sum(km2))
#Adicionando as colunas restantes
transitions_agregado$QtPixel = transitions_agregado$`sum(km2)`*1108
transitions_agregado$yearFrom = 1985
transitions_agregado$yearTo = 2020
transitions_agregado$Interval = 35
transitions_agregado$Period = '1985-2020'
transitions_agregado = transitions_agregado %>% rename(km2 = 'sum(km2)')
agg_legend_table <- read_csv("output/agg_legend_table.csv")
agg_legend_table = agg_legend_table %>%
rename(categoryValue = agg_categoryValue,
categoryName = agg_categoryName,
color = Color)
agg_legend_table = agg_legend_table %>% select(-Aggregated_class)
transitions_agregado = transitions_agregado %>% select(Period, From, To , km2, QtPixel, Interval, yearFrom, yearTo)
###Fazendo o grafico
matriz_transicoes <- read_excel("output/matriz_transicoes.xlsx")
#tirando o Log para suavizar
matriz_transicoes_log = matriz_transicoes
matriz_transicoes_log$km2 = log(matriz_transicoes_log$km2)
agg_legend_table$categoryName <- factor(c("Agricultura", "Floresta", "Formação natural não-florestal", "Não observado", "Área não-vegetada", "Pasto",
"Água"),
levels = c("Floresta", "Formação natural não-florestal", "Pasto", "Agricultura", "Área não-vegetada", "Água",
"Não observado"))
#gráficos legais
chordDiagramLand(dataset = matriz_transicoes,
legendtable = agg_legend_table, legposition = c(-1.7, 1), legtitle = "Fluxo de Transição 1985-2020
Àrea em log" )
sankeyLand(dataset = matriz_transicoes,
legendtable = agg_legend_table)
sankeyLand(dataset = matriz_transicoes_log,
legendtable = agg_legend_table)
#grafico sem floresta
matriz_sem_floresta = matriz_transicoes %>%
filter(From!="1") %>%
filter(To!="1")
leg_sf = agg_legend_table %>%
filter(categoryValue !="1")
leg_sf$categoryName <- factor(c("Ag", "Nf", "No", "Nv", "Pa",
"Wa"),
levels = c("Nf", "Pa", "Ag", "Nv", "Wa",
"No"))
chordDiagramLand(dataset = matriz_sem_floresta,
legendtable = leg_sf)
sankeyLand(dataset = matriz_sem_floresta,
legendtable = leg_sf)
library(ggplot2)
library(viridis)
library(hrbrthemes)
library(readr)
library(OpenLand)
library(dplyr)
library(readxl)
##DADOS DESAGREGADOS
LULC_desagregado <- read_csv("output/LULC_Clean.csv")
#SERIE - PASTO
pasto = LULC_desagregado %>% filter(class_name == "Pasture")
ggplot(pasto, aes(y=area, x=year)) +
geom_bar(position="stack", stat="identity", fill = "#FFD966") +
scale_fill_viridis(discrete = T) +
labs( title = "Área de Pastagem em Unidades de Conservação Federal",
subtitle = "Período: 1985-2020", caption = "Fonte: Mapbiomas") +
theme_ipsum() +
xlab("") +
ylab("Área (Km²)")
#SERIE SOJA
soja = LULC_desagregado %>% filter(class_name == "Soy Beans")
ggplot( soja, aes(y=area, x=year)) +
geom_bar(position="stack", stat="identity", fill = "#e075ad") +
scale_fill_viridis(discrete = T) +
labs( title = "Área de Soja em Unidades de Conservação Federal", subtitle = "Período: 1985-2020", caption = "Fonte: Mapbiomas") +
theme_ipsum() +
xlab("") +
ylab("Area (Km²)")
#SERIE MINERAÇÃO
mineiracao = LULC_desagregado %>% filter(class_name == "Mining")
ggplot( mineiracao, aes( y=area, x=year)) +
geom_bar(position="stack", stat="identity", fill = "#af2a2a") +
scale_fill_viridis(discrete = T) +
labs( title = "Mineiração em Unidades de Conservação Federal", subtitle = "Período: 1985-2020", caption = "Fonte: Mapbiomas") +
theme_ipsum() +
xlab("") +
ylab("Area (Km²)")
##DADOS AGREGADOS
LULC_ACF <- read_csv("output/LULC_ACF.csv")
LULC_ACF = LULC_ACF %>% rename( area = 'sum(area)')
#PARA TODOS OS DADOS JUNTOS
LULC_ACF$log_area = log(LULC_ACF$area)
leg_traduzida <- read_csv("output/leg_traduzida.csv")
LULC_ACF = dplyr::left_join(LULC_ACF, leg_traduzida, by = "Aggregated_class")
#estatisticas
floresta_apenas = LULC_ACF %>% filter(Classe == "Floresta")
mean(floresta_apenas$area)
332715.9/381420.3
fnnf = LULC_ACF %>% filter(Classe == "Formação Natural não Florestal")
mean(fnnf$area)
36567.15/381420.3 + 332715.9/381420.3
#log
ggplot( LULC_ACF, aes(fill= Classe, y= log_area, x=year)) +
geom_bar(position="stack", stat="identity") +
scale_fill_viridis(discrete = T) +
labs( title = "Uso da Terra em Unidades de Conservação Federal", subtitle = "Período: 1985-2020", caption = "Fonte: Mapbiomas") +
theme_ipsum() +
xlab("") +
ylab("log(Area (Km²))")
#nível
ggplot( LULC_ACF, aes(fill= Classe, y= area, x=year)) +
geom_bar(position="stack", stat="identity") +
scale_fill_viridis(discrete = T) +
labs( title = "Uso da Terra em Unidades de Conservação Federal", subtitle = "Período: 1985-2020", caption = "Fonte: Mapbiomas") +
theme_ipsum() +
xlab("") +
ylab("Area (Km²)")
#AGRICULTURA
agricultura = LULC_ACF %>% filter(Aggregated_class == "Agriculture")
ggplot(agricultura, aes(fill= Aggregated_class, y= area, x=year)) +
geom_bar(position="stack", stat="identity") +
scale_fill_viridis(discrete = T) +
labs( title = "Área de Agricultura em Unidades de Conservação Federal", subtitle = "Período: 1985-2020", caption = "Fonte: Mapbiomas") +
theme_ipsum() +
xlab("") +
ylab("Area (Km²)")
#ÀGUA
agua  = LULC_ACF %>% filter(Aggregated_class == "Water")
ggplot(agua, aes(fill= Aggregated_class, y= area, x=year)) +
geom_bar(position="stack", stat="identity") +
scale_fill_viridis(discrete = T) +
labs( title = "Área de Água em Unidades de Conservação Federal", subtitle = "Período: 1985-2020", caption = "Fonte: Mapbiomas") +
theme_ipsum() +
xlab("") +
ylab("Area (Km²)")
#calculando a variacao nos valores das classes agregadas  de uso da terra entre 2020 e 1985
variacao = LULC_ACF %>%
filter(year == c(1985, 2020))
variacao = variacao %>%
group_by(Classe) %>%
summarise(variation = area[year == 2020] - area[year == 1985])
variacao = variacao %>% filter(Classe != "Não observado")
ggplot(variacao, aes(fill= Classe, y=variation, x= Classe)) +
geom_bar(position="stack", stat="identity") +
scale_fill_viridis(discrete = T) +
labs( title = "Variação do Uso da Terra por Classe", subtitle = "Variação em Unidades de Conservação Federal no Período 1985-2020", caption = "Fonte: Mapbiomas") +
theme_ipsum() +
xlab("") +
ylab("Variação (Km²)") +
geom_text(aes(label= round(variation)), vjust=-0.5, size=3.0)+
theme(axis.title.x=element_blank(),
axis.text.x=element_blank(),
axis.ticks.x=element_blank())
matriz_transicoes <- read_excel("output/matriz_transicoes.xlsx")
#tirando o Log para suavizar
matriz_transicoes_log = matriz_transicoes
matriz_transicoes_log$km2 = log(matriz_transicoes_log$km2)
agg_legend_table <- read_csv("output/agg_legend_table.csv")
agg_legend_table$categoryName <- factor(c("Agricultura", "Floresta", "Formação natural não-florestal", "Não observado", "Área não-vegetada", "Pasto",
"Água"),
levels = c("Floresta", "Formação natural não-florestal", "Pasto", "Agricultura", "Área não-vegetada", "Água",
"Não observado"))
agg_legend_table = agg_legend_table %>% rename(categoryValue = "agg_categoryValue") %>% rename(color = "Color")
#grafico de corda
chordDiagramLand(dataset = matriz_transicoes,
legendtable = agg_legend_table, legposition = c(-1.7, 1), legtitle = "Fluxo de Transição 1985-2020
Àrea em log" )
chordDiagramLand(dataset = matriz_transicoes_log,
legendtable = agg_legend_table, legposition = c(-1.7, 1), legtitle = "Fluxo de Transição 1985-2020
Àrea em log" )
#graficos sankey
sankeyLand(dataset = matriz_transicoes,
legendtable = agg_legend_table)
sankeyLand(dataset = matriz_transicoes_log,
legendtable = agg_legend_table)
#Nomeando o dataset que será limpo
LULC_raw <- read_csv("input/LULC-unidades-de-conservacao-federal.csv")
#Limpando colunas desnecessárias
LULC_clean = LULC_raw %>%
select(area:class_name)
#Arrumando a coluna de ano
LULC_clean$year <- gsub("^.{0,15}", "", LULC_clean$band)
#Removendo a coluna "band"
LULC_clean = LULC_clean %>%
select(-band)
#Convertendo ano para valores numéricos
LULC_clean$year = as.numeric(LULC_clean$year)
#Reordenando as colunas para fazer mais sentido
LULC_clean = LULC_clean %>%
select(year, class_name, class, area)
#Agregando as categorias (para diminuir o total de classes)
agg_class = read.csv("output/agg_class.csv") #arquivo de legenda obtido do site do mapbiomas
LULC_agregado = dplyr::full_join(agg_class, LULC_clean, by = "class", na.rm = TRUE)
LULC_agregado = LULC_agregado%>% filter(!is.na(area))  #retirando os NAs
#Ordenando pelo ano
LULC_agregado = LULC_agregado %>%
arrange(year)
#Agrupando e somando as linhas redundantes referentes a mesma classe superior
LULC_ACF = LULC_agregado %>%
group_by(Aggregated_class, year) %>%
summarise(sum(area))
#Renomeando os nomes das colunas
LULC_ACF= LULC_ACF %>%
rename(area = `sum(area)`) %>%
rename(aggregate_class = Aggregated_class)
#Carregando os dados crus de transicao
library(readxl)
library(readr)
LULC_transitions <- read_csv("input/LULC-transitions-c.csv")
#Carregando dados da legenda das classes
library(readr)
legend_table <- read_csv("output/legend_table.csv")
###Juntando as bases
library(dplyr)
#Selecionando apenas as colunas desejadas para o bind
transitions_from = legend_table %>%
select(Class, categoryValue)
#Renomenado a coluna que fara a chave
transitions_from= transitions_from %>%
rename(From = Class)
#Dando o join e limpando os NAs
LULC_tr_from = dplyr::full_join(transitions_from, LULC_transitions, by = "From", na.rm = TRUE)
LULC_tr_from = LULC_tr_from%>% filter(!is.na(km2))  #retirando os NAs
#Limpando as colunas adicionais e renomeando algumas outras
LULC_tr_from = LULC_tr_from %>%
select(-From)
LULC_tr_from = LULC_tr_from %>%
rename(From = categoryValue)
#Selecionando apenas as colunas desejadas para o bind
transitions_to = legend_table %>%
select(Class, categoryValue)
#Renomenado a coluna que fara a chave
transitions_to= transitions_to %>%
rename(To = Class)
#Dando o join e limpando os NAs
LULC_tr_to = dplyr::full_join(transitions_to, LULC_tr_from, by = "To", na.rm = TRUE)
LULC_tr_to = LULC_tr_to%>% filter(!is.na(km2))  #retirando os NAs
#Limpando as colunas adicionais e renomeando algumas outras
LULC_tr_to = LULC_tr_to %>%
select(-To)
LULC_tr_to = LULC_tr_to %>%
rename(To = categoryValue)
###Testando o grafico de chord
library(OpenLand)
#Arrumando a legenda
legenda = legend_table %>%
select(categoryValue:Color)
legenda = legenda %>% rename(color = Color)
legenda$categoryName <- factor(c("Fo", "FF","SF", "Mg",
"FP","Nf","WL","GL",
"OF","Pa","Ag","TC",
"SC","Mo","Nv","BD",
"UA","ON","Wa","No",
"RO","Mn","Aq","Sa",
"RL","PC","SB","Rc",
"OT","MC","Cf","Ct",
"OP","WR"),
levels = c("Ag", "Ct", "Cf", "FP", "Mo", "MC",
"OP", "OT", "PC", "Rc", "SB", "SC",
"TC", "Fo", "FF", "Mg", "SF", "WR",
"GL", "Nf", "OF", "RO", "Sa", "WL",
"No", "BD", "Mn", "Nv", "ON", "UA",
"Pa", "Aq", "RL", "Wa"))
#Selecionando apenas as colunas desejadas para o bind
agregado_from = legend_table %>%
select(Aggregated_class, categoryValue)
#Renomenado a coluna que fara a chave
agregado_from = agregado_from %>%
rename(From = categoryValue)
#Dando o join e limpando os NAs
LULC_agg_from = dplyr::full_join(agregado_from, LULC_tr_to, by = "From", na.rm = TRUE)
LULC_agg_from = LULC_agg_from%>% filter(!is.na(km2))  #retirando os NAs
#Retirando a coluna com codigos antigos
LULC_agg_from = LULC_agg_from %>% select(-From)
#Pegando o codigo de classe das categorias agregadas
chave_agg_from = legend_table %>% select(Aggregated_class, agg_categoryValue)
chave_agg_from = distinct(chave_agg_from)
LULC_agg_from = dplyr::left_join(LULC_agg_from, chave_agg_from, by = "Aggregated_class", na.rm = TRUE)
LULC_agg_from = LULC_agg_from %>% select(-Aggregated_class)
LULC_agg_from = LULC_agg_from %>% rename(From = agg_categoryValue)
#Selecionando apenas as colunas desejadas para o bind
agregado_to = legend_table %>%
select(Aggregated_class, categoryValue)
#Renomenado a coluna que fara a chave
agregado_to = agregado_to %>%
rename(To = categoryValue)
#Dando o join e limpando os NAs
LULC_agg_to = dplyr::full_join(agregado_to, LULC_agg_from, by = "To", na.rm = TRUE)
LULC_agg_to = LULC_agg_to%>% filter(!is.na(km2))  #retirando os NAs
#Retirando a coluna com codigos antigos
LULC_agg_to = LULC_agg_to %>% select(-To)
#Pegando o codigo de classe das categorias agregadas
chave_agg_from = legend_table %>% select(Aggregated_class, agg_categoryValue)
chave_agg_from = distinct(chave_agg_from)
LULC_agg_to = dplyr::left_join(LULC_agg_to, chave_agg_from, by = "Aggregated_class", na.rm = TRUE)
LULC_agg_to = LULC_agg_to %>% select(-Aggregated_class)
LULC_agg_to = LULC_agg_to %>% rename(To = agg_categoryValue)
#Agora e necessario dar um groupby para reduzir o numero de linhas
transitions_agregado = LULC_agg_to %>%
group_by(From, To) %>%
summarise(sum(km2))
#Adicionando as colunas restantes
transitions_agregado$QtPixel = transitions_agregado$`sum(km2)`*1108
transitions_agregado$yearFrom = 1985
transitions_agregado$yearTo = 2020
transitions_agregado$Interval = 35
transitions_agregado$Period = '1985-2020'
transitions_agregado = transitions_agregado %>% rename(km2 = 'sum(km2)')
agg_legend_table <- read_csv("output/agg_legend_table.csv")
agg_legend_table = agg_legend_table %>%
rename(categoryValue = agg_categoryValue,
categoryName = agg_categoryName,
color = Color)
agg_legend_table = agg_legend_table %>% select(-Aggregated_class)
transitions_agregado = transitions_agregado %>% select(Period, From, To , km2, QtPixel, Interval, yearFrom, yearTo)
###Fazendo o grafico
matriz_transicoes <- read_excel("output/matriz_transicoes.xlsx")
#tirando o Log para suavizar
matriz_transicoes_log = matriz_transicoes
matriz_transicoes_log$km2 = log(matriz_transicoes_log$km2)
agg_legend_table$categoryName <- factor(c("Agricultura", "Floresta", "Formação natural não-florestal", "Não observado", "Área não-vegetada", "Pasto",
"Água"),
levels = c("Floresta", "Formação natural não-florestal", "Pasto", "Agricultura", "Área não-vegetada", "Água",
"Não observado"))
#gráficos legais
chordDiagramLand(dataset = matriz_transicoes,
legendtable = agg_legend_table, legposition = c(-1.7, 1), legtitle = "Fluxo de Transição 1985-2020
Àrea em log" )
sankeyLand(dataset = matriz_transicoes,
legendtable = agg_legend_table)
sankeyLand(dataset = matriz_transicoes_log,
legendtable = agg_legend_table)
#grafico sem floresta
matriz_sem_floresta = matriz_transicoes %>%
filter(From!="1") %>%
filter(To!="1")
leg_sf = agg_legend_table %>%
filter(categoryValue !="1")
leg_sf$categoryName <- factor(c("Ag", "Nf", "No", "Nv", "Pa",
"Wa"),
levels = c("Nf", "Pa", "Ag", "Nv", "Wa",
"No"))
#graficos sankey
sankeyLand(dataset = matriz_transicoes,
legendtable = agg_legend_table)
sankeyLand(dataset = matriz_transicoes_log,
legendtable = agg_legend_table)
#Arrumando a legenda
legenda = legend_table %>%
select(categoryValue:Color)
legenda = legenda %>% rename(color = Color)
legenda$categoryName <- factor(c("Fo", "FF","SF", "Mg",
"FP","Nf","WL","GL",
"OF","Pa","Ag","TC",
"SC","Mo","Nv","BD",
"UA","ON","Wa","No",
"RO","Mn","Aq","Sa",
"RL","PC","SB","Rc",
"OT","MC","Cf","Ct",
"OP","WR"),
levels = c("Ag", "Ct", "Cf", "FP", "Mo", "MC",
"OP", "OT", "PC", "Rc", "SB", "SC",
"TC", "Fo", "FF", "Mg", "SF", "WR",
"GL", "Nf", "OF", "RO", "Sa", "WL",
"No", "BD", "Mn", "Nv", "ON", "UA",
"Pa", "Aq", "RL", "Wa"))
#Selecionando apenas as colunas desejadas para o bind
agregado_from = legend_table %>%
select(Aggregated_class, categoryValue)
#Renomenado a coluna que fara a chave
agregado_from = agregado_from %>%
rename(From = categoryValue)
#Dando o join e limpando os NAs
LULC_agg_from = dplyr::full_join(agregado_from, LULC_tr_to, by = "From", na.rm = TRUE)
LULC_agg_from = LULC_agg_from%>% filter(!is.na(km2))  #retirando os NAs
#Retirando a coluna com codigos antigos
LULC_agg_from = LULC_agg_from %>% select(-From)
#Pegando o codigo de classe das categorias agregadas
chave_agg_from = legend_table %>% select(Aggregated_class, agg_categoryValue)
chave_agg_from = distinct(chave_agg_from)
LULC_agg_from = dplyr::left_join(LULC_agg_from, chave_agg_from, by = "Aggregated_class", na.rm = TRUE)
LULC_agg_from = LULC_agg_from %>% select(-Aggregated_class)
LULC_agg_from = LULC_agg_from %>% rename(From = agg_categoryValue)
#Selecionando apenas as colunas desejadas para o bind
agregado_to = legend_table %>%
select(Aggregated_class, categoryValue)
#Renomenado a coluna que fara a chave
agregado_to = agregado_to %>%
rename(To = categoryValue)
#Dando o join e limpando os NAs
LULC_agg_to = dplyr::full_join(agregado_to, LULC_agg_from, by = "To", na.rm = TRUE)
LULC_agg_to = LULC_agg_to%>% filter(!is.na(km2))  #retirando os NAs
#Retirando a coluna com codigos antigos
LULC_agg_to = LULC_agg_to %>% select(-To)
#Pegando o codigo de classe das categorias agregadas
chave_agg_from = legend_table %>% select(Aggregated_class, agg_categoryValue)
chave_agg_from = distinct(chave_agg_from)
LULC_agg_to = dplyr::left_join(LULC_agg_to, chave_agg_from, by = "Aggregated_class", na.rm = TRUE)
LULC_agg_to = LULC_agg_to %>% select(-Aggregated_class)
LULC_agg_to = LULC_agg_to %>% rename(To = agg_categoryValue)
#Agora e necessario dar um groupby para reduzir o numero de linhas
transitions_agregado = LULC_agg_to %>%
group_by(From, To) %>%
summarise(sum(km2))
#Adicionando as colunas restantes
transitions_agregado$QtPixel = transitions_agregado$`sum(km2)`*1108
transitions_agregado$yearFrom = 1985
transitions_agregado$yearTo = 2020
transitions_agregado$Interval = 35
transitions_agregado$Period = '1985-2020'
transitions_agregado = transitions_agregado %>% rename(km2 = 'sum(km2)')
agg_legend_table <- read_csv("output/agg_legend_table.csv")
agg_legend_table = agg_legend_table %>%
rename(categoryValue = agg_categoryValue,
categoryName = agg_categoryName,
color = Color)
agg_legend_table = agg_legend_table %>% select(-Aggregated_class)
transitions_agregado = transitions_agregado %>% select(Period, From, To , km2, QtPixel, Interval, yearFrom, yearTo)
